using iText.Kernel.Pdf;
using iText.Kernel.Utils;
using System;

namespace Library.Services.PDF
{
    public static class PdfMergeService
    {
        /// <summary>
        /// Name of assets file with extension
        /// </summary>
        const string NYSBOARDONLYPAGE = "NYS_BOARD_ONLY_PAGE.pdf";
        /// <summary>
        /// Name of assets file without extension
        /// </summary>
        const string NYSRP524 = "NYS_RP524";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="outputFilePath"></param>
        /// <param name="firstPdfPath">This should be the filled and flattened PDF generated by the client</param>
        /// <param name="secondPdfName">We depend on this being copied from ~/Assets to the expected dir during build</param>
        /// <returns></returns>
        public static string MergeClientPdfWithBoardOnlyPage(
            string outputFilePath,
            string firstPdfPath,
            string secondPdfName = "BOARD_ONLY_PAGE.pdf"
        )
        {
            var secondPdfPath = System.IO.Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                "Assets",
                secondPdfName
            );
            using var pdfWriter = new PdfWriter(outputFilePath);
            PdfDocument newPdf = new PdfDocument(pdfWriter);
            PdfMerger merger = new PdfMerger(newPdf);

            // Add pages from the first document
            using var pdfReader1 = new PdfReader(firstPdfPath);
            PdfDocument firstSourcePdf = new PdfDocument(pdfReader1);
            merger.Merge(firstSourcePdf, 1, firstSourcePdf.GetNumberOfPages());

            // Add pages from the second pdf document
            using var pdfReader2 = new PdfReader(secondPdfPath);
            PdfDocument secondSourcePdf = new PdfDocument(pdfReader2);
            merger.Merge(secondSourcePdf, 1, secondSourcePdf.GetNumberOfPages());

            firstSourcePdf.Close();
            secondSourcePdf.Close();
            newPdf.Close();
            return outputFilePath;
        }

        /// <summary>
        /// Returns path to blank NYS RP-524
        /// </summary>        
        public static string GetPathToFillableNysForm(string pdfName = NYSRP524)
        {
            var fillablePdfPath = System.IO.Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                "Assets",
                $"{pdfName}.pdf"
            );
            return fillablePdfPath;
        }

        public static string GetPathToFillableNysBoardOnlyPage(string pdfName = NYSBOARDONLYPAGE)
        {
            var fillableBoardOnlyPage = System.IO.Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                "Assets",
                pdfName
            );
            return fillableBoardOnlyPage;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="outputFilePath"></param>
        /// <param name="firstPdfPath">This should be the filled NYS RP-524 form</param>
        /// <param name="secondPdfName">We depend on this being copied from ~/Assets to the expected dir during build</param>
        /// <returns></returns>
        public static string MergeFilledNYSPdfWithNYSBoardOnlyPage(
            string outputFilePath,
            string firstPdfPath
            
        )
        {
            var secondPdfPath = GetPathToFillableNysBoardOnlyPage();
            using var pdfWriter = new PdfWriter(outputFilePath);
            PdfDocument newPdf = new PdfDocument(pdfWriter);
            PdfMerger merger = new PdfMerger(newPdf);

            // Add pages from the first document
            using var pdfReader1 = new PdfReader(firstPdfPath);
            PdfDocument firstSourcePdf = new PdfDocument(pdfReader1);
            merger.Merge(firstSourcePdf, 1, firstSourcePdf.GetNumberOfPages());

            // Add pages from the second pdf document
            using var pdfReader2 = new PdfReader(secondPdfPath);
            PdfDocument secondSourcePdf = new PdfDocument(pdfReader2);
            merger.Merge(secondSourcePdf, 1, secondSourcePdf.GetNumberOfPages());

            firstSourcePdf.Close();
            secondSourcePdf.Close();
            newPdf.Close();
            return outputFilePath;
        }
    }
}
